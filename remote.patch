diff --git a/crates/editor/src/editor.rs b/crates/editor/src/editor.rs
index 4e3baf69ff..60ac4b432a 100644
--- a/crates/editor/src/editor.rs
+++ b/crates/editor/src/editor.rs
@@ -133,6 +133,7 @@ use project::{
         },
         session::{Session, SessionEvent},
     },
+    git_store::{GitStoreEvent, RepositoryEvent},
     project_settings::DiagnosticSeverity,
 };
 
@@ -1760,6 +1761,31 @@ impl Editor {
                         _ => {}
                     },
                 ));
+                let git_store = project.read(cx).git_store().clone();
+                let project = project.clone();
+                project_subscriptions.push(cx.subscribe(&git_store, move |this, _, event, cx| {
+                    match event {
+                        GitStoreEvent::RepositoryUpdated(
+                            _,
+                            RepositoryEvent::Updated {
+                                new_instance: true, ..
+                            },
+                            _,
+                        ) => {
+                            this.load_diff_task = Some(
+                                update_uncommitted_diff_for_buffer(
+                                    cx.entity(),
+                                    &project,
+                                    this.buffer.read(cx).all_buffers(),
+                                    this.buffer.clone(),
+                                    cx,
+                                )
+                                .shared(),
+                            );
+                        }
+                        _ => {}
+                    }
+                }));
             }
         }
 
diff --git a/crates/feature_flags/src/feature_flags.rs b/crates/feature_flags/src/feature_flags.rs
index b991f1b71c..7a6ddb51cf 100644
--- a/crates/feature_flags/src/feature_flags.rs
+++ b/crates/feature_flags/src/feature_flags.rs
@@ -80,6 +80,10 @@ impl FeatureFlag for NotebookFeatureFlag {
 pub struct DebuggerFeatureFlag {}
 impl FeatureFlag for DebuggerFeatureFlag {
     const NAME: &'static str = "debugger";
+
+    fn enabled_for_all() -> bool {
+        true 
+    }
 }
 
 pub struct ThreadAutoCaptureFeatureFlag {}
diff --git a/crates/git_ui/src/git_panel.rs b/crates/git_ui/src/git_panel.rs
index 0d93d8aa2a..7c39ed19f3 100644
--- a/crates/git_ui/src/git_panel.rs
+++ b/crates/git_ui/src/git_panel.rs
@@ -441,7 +441,7 @@ impl GitPanel {
                 }
                 GitStoreEvent::RepositoryUpdated(
                     _,
-                    RepositoryEvent::Updated { full_scan },
+                    RepositoryEvent::Updated { full_scan, .. },
                     true,
                 ) => {
                     this.schedule_update(*full_scan, window, cx);
diff --git a/crates/project/src/git_store.rs b/crates/project/src/git_store.rs
index 0be12c30cc..7d32313582 100644
--- a/crates/project/src/git_store.rs
+++ b/crates/project/src/git_store.rs
@@ -292,7 +292,7 @@ pub enum RepositoryState {
 
 #[derive(Clone, Debug)]
 pub enum RepositoryEvent {
-    Updated { full_scan: bool },
+    Updated { full_scan: bool, new_instance: bool },
     MergeHeadsChanged,
 }
 
@@ -1496,7 +1496,7 @@ impl GitStore {
 
             repo.update(cx, {
                 let update = update.clone();
-                |repo, cx| repo.apply_remote_update(update, cx)
+                |repo, cx| repo.apply_remote_update(update, is_new, cx)
             })?;
 
             this.active_repo_id.get_or_insert_with(|| {
@@ -3594,7 +3594,10 @@ impl Repository {
                             let snapshot = this.update(&mut cx, |this, cx| {
                                 this.snapshot.branch = branch;
                                 let snapshot = this.snapshot.clone();
-                                cx.emit(RepositoryEvent::Updated { full_scan: false });
+                                cx.emit(RepositoryEvent::Updated {
+                                    full_scan: false,
+                                    new_instance: false,
+                                });
                                 snapshot
                             })?;
                             if let Some(updates_tx) = updates_tx {
@@ -3939,6 +3942,7 @@ impl Repository {
     pub(crate) fn apply_remote_update(
         &mut self,
         update: proto::UpdateRepository,
+        is_new: bool,
         cx: &mut Context<Self>,
     ) -> Result<()> {
         let conflicted_paths = TreeSet::from_ordered_entries(
@@ -3972,7 +3976,10 @@ impl Repository {
         if update.is_last_update {
             self.snapshot.scan_id = update.scan_id;
         }
-        cx.emit(RepositoryEvent::Updated { full_scan: true });
+        cx.emit(RepositoryEvent::Updated {
+            full_scan: true,
+            new_instance: is_new,
+        });
         Ok(())
     }
 
@@ -4302,7 +4309,10 @@ impl Repository {
                                 .ok();
                         }
                     }
-                    cx.emit(RepositoryEvent::Updated { full_scan: false });
+                    cx.emit(RepositoryEvent::Updated {
+                        full_scan: false,
+                        new_instance: false,
+                    });
                 })
             },
         );
@@ -4562,7 +4572,10 @@ async fn compute_snapshot(
         || branch != prev_snapshot.branch
         || statuses_by_path != prev_snapshot.statuses_by_path
     {
-        events.push(RepositoryEvent::Updated { full_scan: true });
+        events.push(RepositoryEvent::Updated {
+            full_scan: true,
+            new_instance: false,
+        });
     }
 
     // Cache merge conflict paths so they don't change from staging/unstaging,
diff --git a/crates/proto/src/typed_envelope.rs b/crates/proto/src/typed_envelope.rs
index a4d0a9bf85..de1bf701de 100644
--- a/crates/proto/src/typed_envelope.rs
+++ b/crates/proto/src/typed_envelope.rs
@@ -130,7 +130,8 @@ pub trait ToProto {
 impl FromProto for PathBuf {
     #[cfg(target_os = "windows")]
     fn from_proto(proto: String) -> Self {
-        proto.split("/").collect()
+        // proto.split("/").collect()
+        PathBuf::from(proto)
     }
 
     #[cfg(not(target_os = "windows"))]
@@ -148,8 +149,15 @@ impl FromProto for Arc<Path> {
 impl ToProto for PathBuf {
     #[cfg(target_os = "windows")]
     fn to_proto(self) -> String {
+        use std::path::Component;
         self.components()
-            .map(|comp| comp.as_os_str().to_string_lossy().to_string())
+            .map(|comp| {
+                if comp == Component::RootDir {
+                    "".to_string()
+                } else {
+                    comp.as_os_str().to_string_lossy().to_string()
+                }
+            })
             .collect::<Vec<_>>()
             .join("/")
     }
@@ -163,8 +171,15 @@ impl ToProto for PathBuf {
 impl ToProto for &Path {
     #[cfg(target_os = "windows")]
     fn to_proto(self) -> String {
+        use std::path::Component;
         self.components()
-            .map(|comp| comp.as_os_str().to_string_lossy().to_string())
+            .map(|comp| {
+                if comp == Component::RootDir {
+                    "".to_string()
+                } else {
+                    comp.as_os_str().to_string_lossy().to_string()
+                }
+            })
             .collect::<Vec<_>>()
             .join("/")
     }
diff --git a/crates/remote/src/ssh_session.rs b/crates/remote/src/ssh_session.rs
index 660e562780..d78714844e 100644
--- a/crates/remote/src/ssh_session.rs
+++ b/crates/remote/src/ssh_session.rs
@@ -380,16 +380,16 @@ impl SshSocket {
             .stdin(Stdio::piped())
             .stdout(Stdio::piped())
             .stderr(Stdio::piped())
-            .args(["-o", "ControlMaster=no", "-o"])
-            .arg(format!("ControlPath={}", self.socket_path.display()))
+            // .args(["-o", "ControlMaster=no", "-o"])
+            // .arg(format!("ControlPath={}", self.socket_path.display()))
     }
 
     fn ssh_args(&self) -> Vec<String> {
         vec![
-            "-o".to_string(),
-            "ControlMaster=no".to_string(),
-            "-o".to_string(),
-            format!("ControlPath={}", self.socket_path.display()),
+            // "-o".to_string(),
+            // "ControlMaster=no".to_string(),
+            // "-o".to_string(),
+            // format!("ControlPath={}", self.socket_path.display()),
             self.connection_options.ssh_url(),
         ]
     }
@@ -1437,11 +1437,36 @@ impl RemoteConnection for SshRemoteConnection {
 impl SshRemoteConnection {
     #[cfg(not(unix))]
     async fn new(
-        _connection_options: SshConnectionOptions,
+        connection_options: SshConnectionOptions,
         _delegate: Arc<dyn SshClientDelegate>,
         _cx: &mut AsyncApp,
     ) -> Result<Self> {
-        anyhow::bail!("ssh is not supported on this platform");
+        let url = connection_options.ssh_url();
+        let temp_dir = tempfile::Builder::new()
+            .prefix("zed-ssh-session")
+            .tempdir()?;
+        let master_process = util::command::new_smol_command("ssh")
+            .stdin(Stdio::null())
+            .stdout(Stdio::piped())
+            .stderr(Stdio::piped())
+            .args(connection_options.additional_args())
+            .arg(&url)
+            .kill_on_drop(true)
+            .spawn()?;
+
+        //fake path
+        let socket_path = temp_dir.path().join("ssh.sock");
+        let socket = SshSocket {
+            connection_options,
+            socket_path,
+        };
+
+        Ok(Self {
+            socket,
+            master_process: Mutex::new(Some(master_process)),
+            _temp_dir: temp_dir,
+            remote_binary_path: Some(PathBuf::from(".zed_server/remote_server")),
+        })
     }
 
     #[cfg(unix)]
diff --git a/crates/zed/src/reliability.rs b/crates/zed/src/reliability.rs
index ccbe57e7b3..7a0f6a19c4 100644
--- a/crates/zed/src/reliability.rs
+++ b/crates/zed/src/reliability.rs
@@ -54,7 +54,16 @@ pub fn init_panic_hook(
         if *release_channel::RELEASE_CHANNEL == ReleaseChannel::Dev {
             let location = info.location().unwrap();
             let backtrace = Backtrace::new();
-            eprintln!(
+            macro_rules! log_panic {
+                ($($arg:tt)*) => {
+                    if is_pty {
+                        eprintln!($($arg)*);
+                    } else {
+                        log::error!($($arg)*);
+                    }
+                };
+            }
+            log_panic!(
                 "Thread {:?} panicked with {:?} at {}:{}:{}\n{}{:?}",
                 thread_name,
                 payload,
@@ -73,6 +82,7 @@ pub fn init_panic_hook(
                 },
                 backtrace,
             );
+            zlog::flush();
             std::process::exit(-1);
         }
         let main_module_base_address = get_main_module_base_address();
