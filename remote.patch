diff --git a/Cargo.lock b/Cargo.lock
index baed77a49f..2c134bc066 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -19986,6 +19986,7 @@ dependencies = [
  "extension",
  "extension_host",
  "extensions_ui",
+ "feature_flags",
  "feedback",
  "file_finder",
  "fs",
diff --git a/crates/project/src/debugger/dap_store.rs b/crates/project/src/debugger/dap_store.rs
index be4964bbee..5d2bfcfc5c 100644
--- a/crates/project/src/debugger/dap_store.rs
+++ b/crates/project/src/debugger/dap_store.rs
@@ -269,6 +269,7 @@ impl DapStore {
                         binary.cwd.as_deref(),
                         binary.envs,
                         None,
+                        true,
                     );
 
                     Ok(DebugAdapterBinary {
diff --git a/crates/project/src/terminals.rs b/crates/project/src/terminals.rs
index b067396881..ca4026a16b 100644
--- a/crates/project/src/terminals.rs
+++ b/crates/project/src/terminals.rs
@@ -166,6 +166,7 @@ impl Project {
                     path.as_deref(),
                     env,
                     None,
+                    false,
                 );
                 let mut command = std::process::Command::new(command);
                 command.args(args);
@@ -253,7 +254,7 @@ impl Project {
                             .or_insert_with(|| "xterm-256color".to_string());
 
                         let (program, args) =
-                            wrap_for_ssh(&ssh_command, None, path.as_deref(), env, None);
+                            wrap_for_ssh(&ssh_command, None, path.as_deref(), env, None, false);
                         env = HashMap::default();
                         (
                             Option::<TaskState>::None,
@@ -304,6 +305,7 @@ impl Project {
                             path.as_deref(),
                             env,
                             python_venv_directory.as_deref(),
+                            false,
                         );
                         env = HashMap::default();
                         (
@@ -533,6 +535,7 @@ pub fn wrap_for_ssh(
     path: Option<&Path>,
     env: HashMap<String, String>,
     venv_directory: Option<&Path>,
+    run_dap: bool,
 ) -> (String, Vec<String>) {
     let to_run = if let Some((command, args)) = command {
         // DEFAULT_REMOTE_SHELL is '"${SHELL:-sh}"' so must not be escaped
@@ -577,7 +580,14 @@ pub fn wrap_for_ssh(
     } else {
         format!("cd; {env_changes} {to_run}")
     };
-    let shell_invocation = format!("sh -c {}", shlex::try_quote(&commands).unwrap());
+
+    let commands = shlex::try_quote(&commands).unwrap();
+    let commands = if !run_dap {
+        escape(commands)
+    } else {
+        commands
+    };
+    let shell_invocation = format!("sh -c {}", commands);
 
     let program = "ssh".to_string();
     let mut args = ssh_command.arguments.clone();
@@ -587,6 +597,47 @@ pub fn wrap_for_ssh(
     (program, args)
 }
 
+pub fn escape(s: Cow<str>) -> Cow<str> {
+    let mut needs_escape = s.is_empty();
+    for ch in s.chars() {
+        match ch {
+            '"' | '\t' | '\n' | ' ' => needs_escape = true,
+            _ => {}
+        }
+    }
+    if !needs_escape {
+        return s
+    }
+    let mut es = String::with_capacity(s.len());
+    es.push('"');
+    let mut chars = s.chars().peekable();
+    loop {
+        let mut nslashes = 0;
+        while let Some(&'\\') = chars.peek() {
+            chars.next();
+            nslashes += 1;
+        }
+
+        match chars.next() {
+            Some('"') => {
+                es.extend(std::iter::repeat('\\').take(nslashes * 2 + 1));
+                es.push('"');
+            }
+            Some(c) => {
+                es.extend(std::iter::repeat('\\').take(nslashes));
+                es.push(c);
+            }
+            None => {
+                es.extend(std::iter::repeat('\\').take(nslashes * 2));
+                break;
+            }
+        }
+
+    }
+    es.push('"');
+    es.into()
+}
+
 fn add_environment_path(env: &mut HashMap<String, String>, new_path: &Path) -> Result<()> {
     let mut env_paths = vec![new_path.to_path_buf()];
     if let Some(path) = env.get("PATH").or(env::var("PATH").ok().as_ref()) {
diff --git a/crates/proto/src/typed_envelope.rs b/crates/proto/src/typed_envelope.rs
index a4d0a9bf85..de1bf701de 100644
--- a/crates/proto/src/typed_envelope.rs
+++ b/crates/proto/src/typed_envelope.rs
@@ -130,7 +130,8 @@ pub trait ToProto {
 impl FromProto for PathBuf {
     #[cfg(target_os = "windows")]
     fn from_proto(proto: String) -> Self {
-        proto.split("/").collect()
+        // proto.split("/").collect()
+        PathBuf::from(proto)
     }
 
     #[cfg(not(target_os = "windows"))]
@@ -148,8 +149,15 @@ impl FromProto for Arc<Path> {
 impl ToProto for PathBuf {
     #[cfg(target_os = "windows")]
     fn to_proto(self) -> String {
+        use std::path::Component;
         self.components()
-            .map(|comp| comp.as_os_str().to_string_lossy().to_string())
+            .map(|comp| {
+                if comp == Component::RootDir {
+                    "".to_string()
+                } else {
+                    comp.as_os_str().to_string_lossy().to_string()
+                }
+            })
             .collect::<Vec<_>>()
             .join("/")
     }
@@ -163,8 +171,15 @@ impl ToProto for PathBuf {
 impl ToProto for &Path {
     #[cfg(target_os = "windows")]
     fn to_proto(self) -> String {
+        use std::path::Component;
         self.components()
-            .map(|comp| comp.as_os_str().to_string_lossy().to_string())
+            .map(|comp| {
+                if comp == Component::RootDir {
+                    "".to_string()
+                } else {
+                    comp.as_os_str().to_string_lossy().to_string()
+                }
+            })
             .collect::<Vec<_>>()
             .join("/")
     }
diff --git a/crates/remote/src/ssh_session.rs b/crates/remote/src/ssh_session.rs
index e01f4cfb04..638dfd801e 100644
--- a/crates/remote/src/ssh_session.rs
+++ b/crates/remote/src/ssh_session.rs
@@ -380,16 +380,16 @@ impl SshSocket {
             .stdin(Stdio::piped())
             .stdout(Stdio::piped())
             .stderr(Stdio::piped())
-            .args(["-o", "ControlMaster=no", "-o"])
-            .arg(format!("ControlPath={}", self.socket_path.display()))
+            // .args(["-o", "ControlMaster=no", "-o"])
+            // .arg(format!("ControlPath={}", self.socket_path.display()))
     }
 
     fn ssh_args(&self) -> Vec<String> {
         vec![
-            "-o".to_string(),
-            "ControlMaster=no".to_string(),
-            "-o".to_string(),
-            format!("ControlPath={}", self.socket_path.display()),
+            // "-o".to_string(),
+            // "ControlMaster=no".to_string(),
+            // "-o".to_string(),
+            // format!("ControlPath={}", self.socket_path.display()),
             self.connection_options.ssh_url(),
         ]
     }
@@ -1437,11 +1437,36 @@ impl RemoteConnection for SshRemoteConnection {
 impl SshRemoteConnection {
     #[cfg(not(unix))]
     async fn new(
-        _connection_options: SshConnectionOptions,
+        connection_options: SshConnectionOptions,
         _delegate: Arc<dyn SshClientDelegate>,
         _cx: &mut AsyncApp,
     ) -> Result<Self> {
-        anyhow::bail!("ssh is not supported on this platform");
+        let url = connection_options.ssh_url();
+        let temp_dir = tempfile::Builder::new()
+            .prefix("zed-ssh-session")
+            .tempdir()?;
+        let master_process = util::command::new_smol_command("ssh")
+            .stdin(Stdio::null())
+            .stdout(Stdio::piped())
+            .stderr(Stdio::piped())
+            .args(connection_options.additional_args())
+            .arg(&url)
+            .kill_on_drop(true)
+            .spawn()?;
+
+        //fake path
+        let socket_path = temp_dir.path().join("ssh.sock");
+        let socket = SshSocket {
+            connection_options,
+            socket_path,
+        };
+
+        Ok(Self {
+            socket,
+            master_process: Mutex::new(Some(master_process)),
+            _temp_dir: temp_dir,
+            remote_binary_path: Some(PathBuf::from(".zed_server/remote_server")),
+        })
     }
 
     #[cfg(unix)]
diff --git a/crates/zed/Cargo.toml b/crates/zed/Cargo.toml
index 884443e770..50499f3887 100644
--- a/crates/zed/Cargo.toml
+++ b/crates/zed/Cargo.toml
@@ -70,6 +70,7 @@ gpui = { workspace = true, features = [
     "windows-manifest",
 ] }
 gpui_tokio.workspace = true
+feature_flags.workspace = true
 
 http_client.workspace = true
 image_viewer.workspace = true
diff --git a/crates/zed/src/reliability.rs b/crates/zed/src/reliability.rs
index ccbe57e7b3..7a0f6a19c4 100644
--- a/crates/zed/src/reliability.rs
+++ b/crates/zed/src/reliability.rs
@@ -54,7 +54,16 @@ pub fn init_panic_hook(
         if *release_channel::RELEASE_CHANNEL == ReleaseChannel::Dev {
             let location = info.location().unwrap();
             let backtrace = Backtrace::new();
-            eprintln!(
+            macro_rules! log_panic {
+                ($($arg:tt)*) => {
+                    if is_pty {
+                        eprintln!($($arg)*);
+                    } else {
+                        log::error!($($arg)*);
+                    }
+                };
+            }
+            log_panic!(
                 "Thread {:?} panicked with {:?} at {}:{}:{}\n{}{:?}",
                 thread_name,
                 payload,
@@ -73,6 +82,7 @@ pub fn init_panic_hook(
                 },
                 backtrace,
             );
+            zlog::flush();
             std::process::exit(-1);
         }
         let main_module_base_address = get_main_module_base_address();
diff --git a/crates/zed/src/zed.rs b/crates/zed/src/zed.rs
index 10fdcf34a6..1f9a89370a 100644
--- a/crates/zed/src/zed.rs
+++ b/crates/zed/src/zed.rs
@@ -19,6 +19,7 @@ use collections::VecDeque;
 use debugger_ui::debugger_panel::DebugPanel;
 use editor::ProposedChangesEditorToolbar;
 use editor::{Editor, MultiBuffer};
+use feature_flags::FeatureFlagAppExt;
 use futures::future::Either;
 use futures::{StreamExt, channel::mpsc, select_biased};
 use git_ui::git_panel::GitPanel;
@@ -523,7 +524,7 @@ fn initialize_panels(
             notification_panel,
             debug_panel,
         )?;
-
+        cx.update(|_, cx| cx.update_flags(true, Vec::new())).ok();
         workspace_handle.update_in(cx, |workspace, window, cx| {
             workspace.add_panel(project_panel, window, cx);
             workspace.add_panel(outline_panel, window, cx);
